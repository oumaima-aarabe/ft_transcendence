services:

  backend:
    build: ./backend/
    container_name: backend
    env_file:
      - .env
    tty: true
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network

  frontend:
    build: ./frontend
    container_name: frontend
    depends_on:
      - backend
    tty: true
    networks:
      - app-network

  nginx:
    # image: nginx:alpine
    container_name: nginx
    build:
        context: ./nginx/
    ports:
        - "443:443"
        - "80:80"
    depends_on:
        backend:
            condition: service_started
        frontend:
            condition: service_started
    restart: always
    networks:
      - app-network

  db:
    image: postgres:16
    container_name: postgres
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
    expose:
      - 5432
    networks:
      - app-network

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - app-network
networks:
  app-network:
    driver: bridge

volumes:
  data: